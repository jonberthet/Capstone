#Build SVM
load("/project/msca/capstone3/datasplits2.RData")
trainingsetsvm<-training.set
validationsetsvm<-validation.set
trainingsetsvm$patient_id<-NULL
trainingsetsvm$y2_charges<-NULL
validationsetsvm$patient_id<-NULL
validationsetsvm$y2_charges<-NULL
trainingsetsvm$label<-as.integer(trainingsetsvm$label)
validationsetsvm$label<-as.integer(validationsetsvm$label)
ptm<-proc.time()
svmmulti<-ksvm(label~., data=trainingsetsvm, type="C-svc", kernel="rbfdot", cross=10, C=10, prob.model=F)
proc.time() - ptm
svmmulti


#Predict 

predclass<-predict(svmmulti)


training.set1<-cbind(predclass, training.set)
Hightrain<-subset(training.set1, predclass=='2')
Lowtrain<-subset(training.set1, predclass=='1')
save(predclass, Hightrain, Lowtrain,  file="/project/msca/capstone3/katiepredclass.RData")
#Build linear regression


#Lowtrain first
hist(training.set$y2_charges)

Lowtrainlm<-Lowtrain
Lowtrainlm$patient_id<-NULL
Lowtrainlm$predclass<-NULL
#4283 predictors present to start
zerovariance<-nearZeroVar(Lowtrainlm, saveMetrics=TRUE)
nrow(zerovariance[zerovariance[,"zeroVar"]=="TRUE",]) #598 variables removed
Lowtrainlm<-Lowtrainlm[,zerovariance$zeroVar==FALSE]
#Now there's 3685 predictors
x_train<-model.matrix(y2_charges~.,Lowtrainlm)
y_train <- Lowtrainlm$y2_charges
ncol(Lowtrainlm)
dfCorr<-cor(x_train) #build correlation matrix
highCorr<-findCorrelation(dfCorr, 0.7) #find all pairwise correlations greater than 0.7
traindf<-x_train[,-highCorr] #remove highly correlated predictors from training set
ytrain<-y_train[,-highCorr]
validatedf<-validation.set
ncol(traindf)
ncol(validationdf)

x_train<-model.matrix(y2_charges~.,Lowtrainlm)
y_train <- Lowtrainlm$y2_charges

#Build benchmark linear regression from reduced data and look at residuals to determine if further transformations are needed
fulllm<-lm(y_train~traindf)
summary(fulllm)
fulllm.MSE <- mean((fulllm$fitted.values - ytrain)^2)
fulllm.MSE
plot(fulllm)

#Predict on test set
testlm<-lm(y2_charges~., data=testdf)
pred<-predict(fulllm, newdata=testdf)
lmRMSE<-sqrt(mean((pred- testdf$y2_charges)^2))
lmRMSE 
lmMAE<-mean(abs(pred- testdf$y2_charges))
lmMAE





#Save possibly for later if we want to cluster
#Create clusters on training set
set.seed(10)
km.charges <- kmeans(data.matrix(training.set[,10]), 2, nstart=50)
plot(data.matrix(training.set[,10]), col = (km.charges$cluster+1), main = "Kmeans Clusters k=3", pch=20, cex=1)
km.charges$centers

training.set1<-cbind(training.set, chargesClustered = km.charges$cluster)

col_idx<-grep("chargesClustered",names(training.set1))
training.set1<-training.set1[,c(col_idx,(1:ncol(training.set1))[-col_idx])]

#create dummy variables for clusters
#for(t in unique(training.set1$chargesClustered)){training.set1[paste("chargesClustered", t, sep="")]<-ifelse(training.set1$chargesClustered==t,1,0)}


#re-order variables in data frame
#col_idx1<-grep("chargesClustered1",names(training.set1))
#training.set1<-training.set1[,c(col_idx1,(1:ncol(training.set1))[-col_idx1])]

#col_idx2<-grep("chargesClustered2",names(training.set1))
#training.set1<-training.set1[,c(col_idx2,(1:ncol(training.set1))[-col_idx2])]

#col_idx3<-grep("chargesClustered3",names(training.set1))
#training.set1<-training.set1[,c(col_idx3,(1:ncol(training.set1))[-col_idx3])]

#col_idx4<-grep("patient_id",names(training.set1))
#training.set1<-training.set1[,c(col_idx4,(1:ncol(training.set1))[-col_idx4])]

#training.set<-training.set1

#Create 3 datasets for the clusters to build models in

#c1 <- training.set[training.set$chargesClustered == 1,]
#c2 <- training.set[training.set$chargesClustered == 2,]
#c3 <- training.set[training.set$chargesClustered == 3,]

#save(training.set, testing.set, validation.set, c1, c2, c3, file="/project/msca/capstone3/datasplits.RData")



