# Classify patients as 0 or nonzero cost

#Step 1: label the patients for classification 0 or 1 

load("/project/msca/capstone3/patient_matrix2revise.RData")
patient_matrix$label <- 0
patient_matrix$label[which(patient_matrix$y2_charges>0)]<-1
patient_matrix$label <- as.factor(patient_matrix$label)


#Step 2: create train, test, validate sets

set.seed(10)
train <- sample(1:nrow(patient_matrix),floor(0.6*nrow(patient_matrix)))
training.set<-patient_matrix[train,]
totalvalidation.set<-patient_matrix[-train,]
set.seed(10)
invalidation<-sample(1:nrow(totalvalidation.set),floor(0.5*nrow(totalvalidation.set)))
testing.set<-totalvalidation.set[invalidation,]
validation.set<-totalvalidation.set[-invalidation,]
save(training.set, testing.set, validation.set,file="/project/msca/capstone3/datasplits2.RData")


# Step 3: Build Classification Models

# Step 3a: rpart tree
library(caret)
ptm <- proc.time()
tree_control <- trainControl(method="cv",number=5,returnResamp="all")
tree01rpart2 <- train(training.set[-c(1,10,ncol(training.set))],training.set$label,method="rpart2",maxdepth=8,trControl=tree_control)#15-min runtime
proc.time() - ptm
save(tree01rpart2,file="/project/msca/capstone3/rpart2class.RData") 

# Step 3b: SVM
#Build SVM
trainingsetsvm<-training.set
validationsetsvm<-validation.set
trainingsetsvm$patient_id<-NULL
trainingsetsvm$y2_charges<-NULL
validationsetsvm$patient_id<-NULL
validationsetsvm$y2_charges<-NULL
trainingsetsvm$label<-as.integer(trainingsetsvm$label)
validationsetsvm$label<-as.integer(validationsetsvm$label)
ptm<-proc.time()
svmmulti<-ksvm(label~., data=trainingsetsvm, type="C-svc", kernel="rbfdot")
proc.time() - ptm
svmmulti


#Predict on testing set

predclass<-predict(svmmulti, newdata=validationsetsvm)

RMSE.test.svm<-RMSE(validationsetsvm$label, pred=predclass)
RMSE.test.svm #0.3903267
svmmae<-mean(abs(predclass-validationsetsvm$label))
svmmae # 0.1523549



