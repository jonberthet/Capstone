# Steps in Final Data Cleaning
# STEP 1: Read in the tables.
# STEP 2: Append inpatient+outpatient files into single tables.
# STEP 3: Define the time split for each patient.
# STEP 4: Create the patient-level matrix based on time split, with summarized year1 variables.
# STEP 5: Cast ICD-9 codes & merge them onto the patient-level matrix
# STEP 6: create med and lab count
# STEP 7: clean demographic level data

### STEP 1: Read in tables ###

# Step 1a: load libraries
#install.packages("readxl")
library(readxl)

# Step 1b: load inpatient tables (except medsIn)
patfin1 <- read.table("/project/msca/data/uchicagomed/Capstone/dr_9389_pat_fin.txt", sep="|", header=T)
patEncFin0 <-read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_pat_enc_fin2.txt", sep = "|", header=TRUE, fileEncoding = "UCS-2LE")
patEncFin1 <- read_excel("/project/msca/capstone3/Copy\ of\ dr_9389_pat_enc_fin2.xlsx")
charges <- read.table("/project/msca/data/uchicagomed/Capstone/dr_9389_charges.txt", sep = "|", header = TRUE)
chargesPOA <- read.table("/project/msca/data/uchicagomed/Capstone/dr_9389_charges_POA.txt", sep = "|", header = TRUE)
chargesAdmitPriority <- read.table("/project/msca/data/uchicagomed/Capstone/dr_9389_charges_admit_priority.txt", sep = "|", header = TRUE)
cptProc1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_cpt_proc.txt",sep="|",quote="",header=T)
icd9Dx1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_icd9_dx.txt",sep="|",quote="",header=T)
icd9Proc1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_icd9_proc.txt",sep="|",quote="",header=T)
icd9ProbList1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_labs.txt",sep="|",quote="",header=T)
flow1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_flow.txt",sep="|",quote="",header=T)
labs1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_labs.txt",sep="|",quote="",header=T)
medsOut1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_meds_out.txt",sep="|",quote="",header=T)

# Step 1c: load outpatient tables
patfin2 <- read.table("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_pat_fin.txt", sep="|", header=T)
patEncFin2 <- read.delim("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_pat_enc_fin.txt", sep = "|", header=TRUE, fileEncoding = "UCS-2LE")
GrahamOut <- read.csv("/project/msca/data/uchicagomed/Capstone_\ New\ Data/Graham_out_ALL_deID.csv", sep="|",header=T, fill=T)
cptProc2 <- read.table("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_cpt_proc.txt", sep = "|", header = TRUE, fileEncoding = "UCS-2LE")
icd9Dx2 <- read.table("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_icd9_dx.txt", sep = "|", header = TRUE, fileEncoding = "UCS-2LE")
icd9Proc2  <- read.table("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_icd9_proc.txt", sep = "|", header = TRUE, fileEncoding = "UCS-2LE")
icd9ProbList2 <- read.table("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_icd9_prob_list.txt", sep = "|", header = TRUE, fileEncoding = "UCS-2LE")
flow2 <- read.delim("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_flow.txt", sep = "|", header = TRUE, fileEncoding = "UCS-2LE")
labs2 <- read.delim("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_labs.txt",sep="|",quote="",header=T,fileEncoding="UTF-16LE")
medsOut2 <- read.delim("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_meds_out.txt",sep="|",quote="",header=T,fileEncoding="UCS-2LE")

# Step 1d: save all tables
save(list=ls(all=TRUE),file="/project/msca/capstone3/all_tables.RData")

# Step 1e: save very large files separately
#medsIn is really big and will be loaded and stored separately
#medsIn <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_meds_in.txt",sep="|",quote="",header=T)
#save(medsIn,file="/project/msca/capstone3/medsIn.RData")
#rm(medsIn)


### STEP 2: Append inpatient+outpatient files ###

# for each file, I do the following:
# load both new and old data
# make column names consistent
# append the new data to the old to create 1 table
# remove the sub-table objects from global environment
# remove duplicates in the combined table
# write the combined table as an RData file
# save all the variables as an RData file

# Step 2a: load the files from Step 1.
load("/project/msca/capstone3/all_tables.RData")

# Step 2b: make inpatient+outpatient files consistent, remove duplicates, and rbind them

#patfin
patfin <- rbind(patfin1, patfin2)
rm(patfin1)
rm(patfin2)
length(unique(patfin$patient_id)) #1 duplicate
which(duplicated(patfin$patient_id)==TRUE)
which(patfin$patient_id==patfin$patient_id[which(duplicated(patfin$patient_id)==TRUE)])
#make sure the rows are identical before deleting one of them
patfin[which(patfin$patient_id==patfin$patient_id[which(duplicated(patfin$patient_id)==TRUE)]),]
patfin <- patfin[-which(duplicated(patfin$patient_id)==TRUE),]
#patfin is now clean

#patEncFin
# first, merge in the 2 versions of the inpatient patEncFin tables (patEncFin0 & patEncFin1)
patEncFin0 <- subset(patEncFin0, select=c(patient_id,encounter_id,enc_eio,enc_fin_class))
patEncFin1 <- subset(patEncFin1, select=-c(adm_date_offset,disch_date_offset)) #remove columns not found in patEncFin2
patEncFin01 <- merge(patEncFin0,patEncFin1,by=c("patient_id","encounter_id"))
# reorder names for the rbind
patEncFin01 <- patEncFin01[,c(which(names(patEncFin01)=="patient_id"),which(names(patEncFin01)=="encounter_id"),which(names(patEncFin01)=="age_at_enc"),which(names(patEncFin01)=="start_date_offset"),which(names(patEncFin01)=="end_date_offset"),which(names(patEncFin01)=="enc_eio"),which(names(patEncFin01)=="enc_fin_class"),which(names(patEncFin01)=="discharge_dispo"))]
#rbind
patEncFin <- rbind(patEncFin01, patEncFin2)
rm(patEncFin0)
rm(patEncFin1)
rm(patEncFin01)
rm(patEncFin2)
nrow(patEncFin)
length(unique(patEncFin$encounter_id))
nrow(unique(patEncFin[,1:2])) # no duplicates
#if duplicates are present, run the next 2 lines to view & fix them
#patEncFin[which(patEncFin$encounter_id==patEncFin$encounter_id[which(duplicated(patEncFin$encounter_id)==TRUE)]),]
#patEncFin <- patEncFin[-which(patEncFin$encounter_id==patEncFin$encounter_id[which(duplicated(patEncFin$encounter_id)==TRUE)]),]
nrow(patEncFin)==nrow(unique(patEncFin[,1:2])) # no duplicates

#flow
names(flow1)==names(flow2)
flow <- rbind(flow1,flow2)
rm(flow1)
rm(flow2)

#cptProc
names(cptProc1)==names(cptProc2)
names(cptProc1)
names(cptProc2)
#cptProc2 is actually just patfin. We will exclude cptProc tables from analysis.
rm(cptProc1)
rm(cptProc2)

#icd9Dx
names(icd9Dx1)==names(icd9Dx2)
icd9Dx <- rbind(icd9Dx1,icd9Dx2)
rm(icd9Dx1)
rm(icd9Dx2)
nrow(icd9Dx)
nrow(unique(icd9Dx[,1:2])) #205,685 unique encounter_ID/patient_ID combinations
length(unique(icd9Dx$encounter_id)) #241,834 unique encounter ID numbers represented
nrow(icd9Dx) #884,803

#icd9Proc
names(icd9Proc1)==names(icd9Proc2)
icd9Proc <- rbind(icd9Proc1,icd9Proc2)
rm(icd9Proc1)
rm(icd9Proc2)
nrow(icd9Proc) #69717 rows
nrow(unique(icd9Proc[,1:2])) #22695 unique patient/encounter combinations

#icd9ProbList
names(icd9ProbList1)
names(icd9ProbList2)
#column names differ significantly.  We will exclude icd9ProbList from analysis for now
rm(icd9ProbList1)
rm(icd9ProbList2)

#labs
names(labs1) == names(labs2)
labs <- rbind(labs1,labs2)
rm(labs1)
rm(labs2)

#medsOut
names(medsOut1)==names(medsOut2)
medsOut <- rbind(medsOut1,medsOut2)
rm(medsOut1)
rm(medsOut2)

#charges_all
#clean GrahamOut
GrahamOut <- GrahamOut[-(grep('NULL',GrahamOut$PATIENT_ID)),] #remove rows with absent patient_ids
nrow(unique(GrahamOut[,1:2])) #371072 patient encounters are represented
sum(duplicated(GrahamOut[,1:2])) # no duplicates
names(GrahamOut) # the way the col names are written is slightly different between GrahamOut & chargesPOA
#[1] "PATIENT_ID"                        "encounter_ID"                     
#[3] "ICD_9_CM_Diagnosis_Principal"      "ICD_9_CM_Diagnosis_Principal_Name"
#[5] "Patient_Count"                     "Charges"                          
#[7] "Direct_Cost"                       "Indirect_Cost"                    
#[9] "Operating_Cost" 
names(GrahamOut)[1] <- "patient_id"
names(GrahamOut)[2] <- "encounter_id"
names(chargesPOA)
nrow(chargesPOA)
nrow(chargesPOA[(grep('NULL',chargesPOA$Encounter_ID)),]) #no NULL encounter_ID vals in chargesPOA
nrow(chargesPOA[(grep('NULL',chargesPOA$Patient_ID)),]) #no NULL patient_ID vals in chargesPOA
# GrahamOut
# create a charges table with all patient encounters
# utilization does not contain diagnosis information
charges_new <- GrahamOut[,-c(3:5)]
names(charges_new)
charges_old <- transform(charges,Operating_cost=Direct.Cost+Indirect.Cost)
charges_old <- charges_old[,c(2,1,3,4,5,6)]
names(charges_old) <- names(charges_new)
charges_all <- rbind(charges_old,charges_new)
rm(charges_old)
rm(charges_new)
dim(charges_all)
nrow(unique(charges_all[,1:2])) # appears to be 1 duplicate
charges_all[(duplicated(charges_all[,1:2])),1:2]
charges_all[which((charges_all$patient_id==1976119) & (charges_all$encounter_id==7385344)),] #duplicates are identical
charges_all <- charges_all[-10299,] # remove the duplicate
charges_all[(duplicated(charges_all[,1:2])),1:2] # no more duplicated rows

# Save the tables. This line has been run, so you just need to re-run it if you've modified any of the above.
save(list=ls(all=TRUE),file="/project/msca/capstone3/all_tables_appended.RData")


### STEP 3: Create Time Split ###

# Step 3a: load libraries & files
library(plyr)
load("/project/msca/capstone3/all_tables_appended.RData")

# Step 3b: create a table of dates of patient encounters - @ patient encounter level
admit_dates <- patEncFin[,c(1:2,4:5)] #create a table of patient encounter dates (admission & discharge)
admit_dates$admission <-as.POSIXct(as.character(admit_dates$start_date_offset), format="%Y-%m-%d %H:%M:%S")
admit_dates$discharge <- as.POSIXct(as.character(admit_dates$end_date_offset), format="%Y-%m-%d %H:%M:%S")
#The following 3 lines fix the issue of NAs in discharge dates - NO LONGER NECESSARY thanks to data received in Oct. 2015
#admit_dates$discharge2 <- admit_dates$discharge #create new column for discharge dates
#no_disch_date2 <- which(is.na(admit_dates$discharge))
#admit_dates$discharge2[no_disch_date2] <- admit_dates$admission[no_disch_date2] #now discharge2 has a discharge date for every entry

# Step 3c: create a table of important dates @ the PATIENT level
# These include first and last admissions, and last discharge; plus the first value of admit_year
# note: we will only need to use admit_year for patients with 1 encounter)
admissions <- ddply(admit_dates, "patient_id",summarise, first_admission=min(admission),last_admission=max(admission),last_discharge=max(discharge),num_encounters=length(encounter_id))#takes a minute

# Step 3d: calculate range (span over time, in # of days) of patient encounter dates (distance between first_admission and last_discharge), and divide in two.
admissions$date_range <- difftime(admissions$last_discharge,admissions$first_admission,units="days")
admissions$half_date_range <- admissions$date_range/2 

# Step 3e: determine each patient's cutoff date: last_admission - 1/2(distance between first and last encounter dates)
admissions$cutoff_date <- admissions$last_discharge - admissions$half_date_range
# for patients with only 1 encounter, we randomly add or substract 1 day to their cutoff date
set.seed(10)
admissions$rand_samp <- as.difftime(sample(c(-1,1),nrow(admissions),replace=T),unit="days")
admissions$cutoff_date[which(admissions$num_encounters==1)] <-  admissions$cutoff_date[which(admissions$num_encounters==1)] + admissions$rand_samp[which(admissions$num_encounters==1)]

# Step 3f: merge charges_all with encounter-level dates table (admit_dates) to link encounter charges to the dates that the encounters happened
# we do this because charges_all only contains patient_id & encounter_id & charges, but not dates, which we'd need to determine which charges happened before the y1/y2 cutoff and which happened after it.
charges_split <- merge(charges_all, admit_dates[,c(1:2,which(names(admit_dates)=="discharge"))],by=c("patient_id","encounter_id"),all.x=TRUE) #same nrows as charges_all, 393925

# Step 3g: merge charges_all with table of important dates at the patient-level (admissions) to determine which encounters happend before or after the y1/y2 cutoff
#now, merge with admission table to create a column of cutoff dates
charges_split <- merge(charges_split,admissions[,c(which(names(admissions)=="patient_id"),which(names(admissions)=="cutoff_date"))],by="patient_id",all.x=T)
charges_above <- subset(charges_split,discharge>cutoff_date)#charges above cutoff; note the >= here
charges_below <- subset(charges_split,discharge<=cutoff_date) #charges below cutoff;
nrow(charges_above) #[1] 194911
nrow(charges_below) #[1] 196462
# we have a comparable number of encounters above and below the cutoff dates.

# Step 3h: create object that identifies encounter_ids that are above or below the cutoff
charges_split$above_cutoff <- 0
charges_split$above_cutoff[which(charges_split$discharge>charges_split$cutoff_date)] <- 1
head(charges_split$above_cutoff)
length(which(charges_split$above_cutoff==0)) #199014
length(which(charges_split$above_cutoff==1)) #194911
charges_split <- charges_split[,c(1:3,7:9)]
save(charges_split,file="/project/msca/capstone3/charges_split.RData")

# Step 3i: calculate year2 charges, and while we're at it, why not calculate y1 charges as well
charges_y2 <- ddply(charges_above, "patient_id",summarise, charges=sum(as.numeric(Charges),na.rm=T))
charges_y1 <- ddply(charges_below, "patient_id",summarise, charges=sum(as.numeric(Charges),na.rm=T))
nrow(charges_y2)#49537
nrow(charges_y1)#45790
length(unique(charges_all$patient_id))#56809
# note that the number of rows in this charges data set is equal to the number of unique patient_ids in those data sets
# note, more importantly, that neither of the number of rows in this data set is equal to the total number of patient ids in charges_all
# this is fine; we just need to merge back in our patients that got lost during the ddply compression to a patient-level matrix.
save(charges_y2,file="/project/msca/capstone3/charges_y2.2.RData")
save(charges_y1,file="/project/msca/capstone3/charges_y1.2.RData")

#Step 3j: #Create a table that ties together patient_id, cutoff date, and year1 & year2 charges
admissions <- merge(admissions,charges_y1,all.x=T)
names(admissions)[which(names(admissions)=="charges")]="charges_y1"
admissions <- merge(admissions,charges_y2,all.x=T)
names(admissions)[which(names(admissions)=="charges")]="charges_y2"
length(which(is.na(admissions$charges_y1) & is.na(admissions$charges_y2))) # 728 patients have no charge data in charges_all. We expected this - see next line.
length(unique(patEncFin$patient_id)) - length(unique(charges_all$patient_id)) #719 patients in patEncFin who didn't have charge data in charges_all
#We expected this because there are 719 patients in patEncFin who have encounters, but no charge data, so we don't know what their charges are for those encounters.
#Therefore, we remove those patients who have NAs for BOTH columns
admissions <- admissions[-which(is.na(admissions$charges_y1) & is.na(admissions$charges_y2)),]
# We set the remaining NA charges to 0, because these refer to patients who had at least 1 charged encounter in the 2-year period.
# This works because these patients didn't appear in charges_y1 data set because they actually had no y1 encounters.
# So charges does in fact = 0 for these NA values.
admissions$charges_y1[which(is.na(admissions$charges_y1))] <- 0
admissions$charges_y2[which(is.na(admissions$charges_y2))] <- 0
patient_cutoff_charges <- admissions[,c(which(names(admissions)=="patient_id"),which(names(admissions)=="cutoff_date"),which(names(admissions)=="charges_y1"),which(names(admissions)=="charges_y2"))]

# Step 3k: save the table
save(patient_cutoff_charges,file="/project/msca/capstone3/patient_cutoff_charges.RData")


### STEP 4: Create Patient-Level matrix (centered)###


#STEP 4a: load data and remove non-year-1 encounter data above from patEncFin
#The following is a patient-level data.frame created in Step 3; contains patient_id,cutoff,y1 charges,y2 charges
load("/project/msca/capstone3/patient_cutoff_charges.RData") 

# clean patEncFin dates
patEncFin_cutoff <- patEncFin
patEncFin_cutoff$admission <-as.POSIXct(as.character(patEncFin_cutoff$start_date_offset), format="%Y-%m-%d %H:%M:%S")
patEncFin_cutoff$discharge <- as.POSIXct(as.character(patEncFin_cutoff$end_date_offset), format="%Y-%m-%d %H:%M:%S")
# IF there are NAs in the discharge date, run the following INSTEAD OF THE PREVIOUS LINE- NO LONGER NEEDED, THANKS TO NEW DATA
# patEncFin_cutoff$dischargeNA <- as.POSIXct(as.character(patEncFin_cutoff$end_date_offset), format="%Y-%m-%d %H:%M:%S")
# patEncFin_cutoff$discharge <-patEncFin_cutoff$dischargeNA
# no_disch_date <- which(is.na(patEncFin_cutoff$dischargeNA))
# if no discharge date is present, assume it is the same as admission date - NO LONGER NEEDED, THANKS TO NEW DATA
# patEncFin_cutoff$discharge[no_disch_date]<-patEncFin_cutoff$admission[no_disch_date]

# add in cutoff date (as well as y1 & y2 charges, for use later)
patEncFin_cutoff <- merge(patEncFin_cutoff,patient_cutoff_charges,all=T)
nrow(patEncFin)==nrow(patEncFin_cutoff)#the merge didn't add any rows to patEncFin; that means all patients in patEncFin are in patient_cutoff_charges. good.

# associate the encounter_ids that were used to calculate year1 charges with this patEncFin table
# to do this, merge the object charges_split with patEncFin_cutoff
load("/project/msca/capstone3/charges_split.RData")
patEncFin_cutoff <- merge(patEncFin_cutoff,charges_split[,c(1:3,6)],by=c("patient_id","encounter_id"),all=T)
length(which(is.na(patEncFin_cutoff$above_cutoff)))
# Out of 465,262 encounters, there are 71,337 NAs where we don't have charges data for patients. I remove these.
patEncFin_cutoff <- subset(patEncFin_cutoff,!is.na(above_cutoff))
save(patEncFin_cutoff,file="/project/msca/capstone3/patEncFin_cutoff.RData")

# We are creating our predictor variables based on year1 only, so we remove rows corresponding to year2
patEncFin_y1 <- subset(patEncFin_cutoff,above_cutoff==0)

# STEP 4b: Calculate year-1 variables
# Calculate length_of_stay
patEncFin_y1$los <- as.numeric(difftime(patEncFin_y1$discharge,patEncFin_y1$admission,units="days"),units="days") #length of stay in days
# later when we create a patient-level table (each row is 1 patient id), we will summarise this as sumlos=sum(los)
# Calculate encounter number/hospitalizations
patEncFin_y1$encounter_id2 <- 1
# later when we create a patient-level table (each row is 1 patient id), we will summarise this as encountfreq=sum(encounter_id2)
# Calculate number of hospitalizations
patEncFin_y1$inpatient <- 0
patEncFin_y1$inpatient[which(patEncFin_y1$enc_eio=="E, I,")] <- 1
patEncFin_y1$inpatient[which(patEncFin_y1$enc_eio=="I,")] <- 1
patEncFin_y1$inpatient[which(patEncFin_y1$enc_eio=="I, O,")] <- 1
# later when we create a patient-level table (each row is 1 patient id), we will summarise this as hospitalizations=sum(inpatient)

Mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

#Step 3: Create a patient-level table which summarizes our calculated variables
patient_matrix <- ddply(patEncFin_y1, "patient_id",summarise, 
                        sumlos=sum(los),
                        encountfreq=sum(encounter_id2),
                        hospitalizations=sum(inpatient),
                        age=max(age_at_enc),
                        num_ER_visits =sum(enc_eio=="E,")+sum(enc_eio=="E, I,")+sum(enc_eio=="E, O,"),
                        mode_discharge_dispo = Mode(discharge_dispo),
                        y1_charges=charges_y1[1],
                        y2_charges=charges_y2[1])

nrow(patient_matrix)#49157

#check for nas
nacols <- function(df) {
  colnames(df)[unlist(lapply(df, function(x) any(is.na(x))))]
}
nacols(patient_matrix) #Remove them the places where NAs are found in both year2 & year1 charges - we shouldn't be finding NAs in BOTH
patient_matrix <- subset(patient_matrix,!is.na(y2_charges) & !(is.na(y1_charges)))
nrow(patient_matrix) #48105

# Step 4c: merge in the demographic variables from the patfin table
patient_matrix <- merge(patient_matrix,patfin,all.x=T) 
# age has NAs for patients without year1 encounters, so we calculate that
patient_age <- ddply(patEncFin[,1:3],"patient_id",summarise,age_y2=max(age_at_enc)) # this a patient's highest (most recent) age
patient_matrix <- merge(patient_matrix,patient_age,by="patient_id",all.x=T)
patient_matrix$age <- NULL


# Step 4d: replace NAs with 0, in columns where it is appropriate to enter 0 for a patient with no encounters
patient_matrix$sumlos[which(is.na(patient_matrix$sumlos))] <- 0
patient_matrix$encountfreq[which(is.na(patient_matrix$encountfreq))] <- 0
patient_matrix$hospitalizations[which(is.na(patient_matrix$hospitalizations))] <- 0
patient_matrix$num_ER_visits[which(is.na(patient_matrix$num_ER_visits))] <- 0
patient_matrix$mode_discharge_dispo[which(is.na(patient_matrix$mode_discharge_dispo))] <- "Not applicable"
patient_matrix$y1_charges[which(is.na(patient_matrix$y1_charges))] <- 0
dim(patient_matrix) #[1] 48105    14

# Step 4e: save the matrix as an .RData file
save(patient_matrix,file="/project/msca/capstone3/patient_matrix_centered.RData")


### STEP 5:  add in the ICD-9 variables ###

# Step 5a: load the patient-level matrix from Step 4, and the other necessary tables.
load("/project/msca/capstone3/all_tables_appended.RData")
load("/project/msca/capstone3/patient_matrix_centered.RData") #loads as the data frame "patient_matrix"

# Step 5a, cont'd: explore the data sets
dim(patient_matrix) #48105    14
length(levels(as.factor(patient_matrix$patient_id))) #48105
length(levels(as.factor(chargesPOA$Patient_ID))) # 7655
names(icd9Dx)
dim(icd9Dx) #884803      6
length(levels(as.factor(icd9Dx$patient_id))) #35266 patients are represented in icd9Dx
names(GrahamOut)
dim(GrahamOut)
length(levels(as.factor(GrahamOut$patient_id))) #45231 patients are represented in GrahamOut
# Julie says that GrahamOut "Diagnosis Principal" is same as chargesPOA diagnosis with sequence value = 1.

# Step 5b: create table that includes inpatients' AND outpatients' primary ICD-9 codes for all encounters
# That is, create table that inncludes patients' primary icd9 codes from ChargesPOA AND GrahamOut (inpatient AND outpatient)
# Julie says that GrahamOut "Diagnosis Principal" is same as chargesPOA diagnosis with sequence value = 1.
# Then clean and explore this table.
diag <- GrahamOut[,1:3]
names(chargesPOA)
head(chargesPOA$ICD.9.CM.Diagnosis...All)
diag2 <- chargesPOA[which(chargesPOA$ICD.9.CM.Diagnosis...Sequence==1),1:3]
dim(diag) #[1] 371072      3
dim(diag2) #[1] 11628     3
diag2 <- diag2[,c(2,1,3)]
names(diag2) <- names(diag)
diag <- rbind(diag,diag2)# warning, but I checked and it's ok
length(which(is.na(diag$patient_id)))#11623
nrow(diag)#382,700
# remove duplicate rows
diag <- unique(diag)
head(diag)
nrow(unique(diag))#372777 
nrow(patient_matrix) #48105
length(unique(diag$patient_id))#45231
# the number of unique patients for which we have diagnosis is 45231
# the number of unique patients in our existing patient matrix is 48105

sum(unique(diag$patient_id) %in% patient_matrix$patient_id) #44493
# so we have 44493 patients with both charges data (and demog. data) AND diagnosis data
# so there's a trade-off between (a) having more patients and (b) having patients with diagnosis data.
# Acknowledging this tradeoff, we choose to incorporate patients with diagnosis data
#class(diag$ICD_9_CM_Diagnosis_Principal)#factor
length(levels(diag$ICD_9_CM_Diagnosis_Principal)) #5031 diagnoses represented in our data set

# Step 5c: remove all diagnoses encounters that did not happen in year 1
# load the file that contains the year1/year2 cutoff information
load("/project/msca/capstone3/patEncFin_cutoff.RData")
#merge in a cutoff_date column to the diagnosis table
diag <- merge(patEncFin_cutoff[,c(1:2,which(names(patEncFin_cutoff)=="above_cutoff"))],diag,all.y=T)
dim(diag)#[1] 372377      4
#for how many patient encounters do we have no date data?
names(diag)
length(which(is.na(diag$above_cutoff)))#1305
sum(is.na(diag$above_cutoff))#1305
#diag <- diag[which(!is.na(diag$cutoff_date)),] # warning
sum(is.na(diag$above_cutoff))
# remove all encounters above the cutoff date
diag <- subset(diag,above_cutoff==0)
dim(diag)#[1] 187548      4
length(levels(diag$ICD_9_CM_Diagnosis_Principal))#5031

# Step 5d: summarize by patient the number of times the person has had a particular ICD9 as their primary diagnosis in year1
# Step 5d(i): test the dcast function on a test matrix of only 2 patients to make sure it does what we want, and does it correctly.
# I'll try with a test_matrix that has single patient's encounter and diagnosis information
test_matrix <- diag[which(diag$patient_id==1000006),]
test_matrix2 <- diag[which(diag$patient_id==1000009),]
test_matrix <- rbind(test_matrix,test_matrix2)
test_matrix$ICD_9_CM_Diagnosis_Principal <- droplevels(test_matrix$ICD_9_CM_Diagnosis_Principal)
length(levels(test_matrix$ICD_9_CM_Diagnosis_Principal)) #5
library(reshape2)
dcast(test_matrix,formula=patient_id~ICD_9_CM_Diagnosis_Principal) # the warning is OK - ignore it.
# that worked!
# now we'll do it on the whole data set.

# Step 5d(ii): cast all icd-9s in our data set to have 1 column each.
diag <- diag[,c(1:2,4)]
diag2 <- dcast(diag,formula=patient_id~ICD_9_CM_Diagnosis_Principal)
dim(diag2)#[1] 44496  4304
head(diag2[,1:5]) # this is what we want
sum(diag2[,2]) # these are the types of values we expect
save(diag2, file="/project/msca/capstone3/diag2.RData")

# Step 5e: merge diag2 to patient-level matrix by overlapping patient_id
# THIS IS OUR FINAL DATA FRAME
patient_matrix2 <- merge(patient_matrix,diag2)
save(patient_matrix2,file="/project/msca/capstone3/patient_matrix2.RData")

#Step 6: 
# Step 6:
library(plyr)
#library(sqldf)
load("/project/msca/capstone3/medsIn2.RData")
load("/project/msca/capstone3/patient_matrix2.RData")
load("/project/msca/capstone3/all_tables_appended.RData")
load("/project/msca/capstone3/charges_split.RData")
medsOut$order_med_time_off<-NULL
medsOut<-unique(medsOut[,1:3]) 
medsIn2$mar_action<-NULL
medsIn2$take_med_time_off<-NULL
medsIn2<-unique(medsIn2[,1:3])
joinmeds<-rbind(medsOut, medsIn2)
joinmeds<-unique(joinmeds[,1:3])
nrow(joinmeds)
Medcount<-count(joinmeds[1:920582,],vars="encounter_id")
charges_all_join_Medcount <- merge(charges_split,Medcount,by="encounter_id")
nacols(charges_all_join_Medcount)
#join_stringmedcount<-"select charges_split.*, Medcount.freq from charges_split left join Medcount on charges_split.encounter_id=Medcount.encounter_id"
#charges_all_join_Medcount<-sqldf(join_stringmedcount, stringsAsFactors=FALSE)
#head(charges_all_join_Medcount)
#tail(charges_all_join_Medcount)
charges_all_join_Medcount<-subset(charges_all_join_Medcount, above_cutoff=='0') #remove year 2 data, use only year 1
nacols(charges_all_join_Medcount)
#charges_all_join_Medcount$freq[is.na(charges_all_join_Medcount$freq)] <- 0 #replace na's with 0
medfreq<-ddply(charges_all_join_Medcount,.(patient_id),summarise,medfreq=sum(freq))
head(medfreq)
length(unique(medfreq$patient_id))

#patient_matrixjoin<-"select patient_matrix2.*, medfreq.medfreq from patient_matrix2 left join medfreq on patient_matrix2.patient_id=medfreq.patient_id"
#patient_matrix<-sqldf(patient_matrixjoin, stringsAsFactors=FALSE)

patient_matrix<-merge(patient_matrix2,medfreq,by.x=c("patient_id"),by.y=c("patient_id"), all.x=TRUE)
patient_matrix$medfreq[which(is.na(patient_matrix$medfreq))] <- 0# replace patient_matrix$medfreq NA values with 0
col_idx<-grep("medfreq",names(patient_matrix))
patient_matrix<-patient_matrix[,c(col_idx,(1:ncol(patient_matrix))[-col_idx])]

#lab count
labcount<-count(labs[1:10153073,],vars="encounter_id")
head(labcount)
tail(labcount)
#join_stringlabcount<-"select charges_split.*, labcount.freq from charges_split left join labcount on charges_split.encounter_id=labcount.encounter_id"
#charges_all_join_labcount<-sqldf(join_stringlabcount,stringsAsFactors=FALSE)
charges_all_join_labcount <- merge(charges_split,labcount,by="encounter_id")
head(charges_all_join_labcount)
tail(charges_all_join_labcount)
charges_all_join_labcount<-subset(charges_all_join_labcount, above_cutoff=='0') #remove year 2 data, use only year 1
#charges_all_join_labcount$freq[is.na(charges_all_join_labcount$freq)] <- 0 #replace na's with 0

labfreq<-ddply(charges_all_join_labcount,.(patient_id),summarise,labfreq=sum(freq))
head(labfreq)
length(unique(labfreq$patient_id))
#patient_matrixjoin1<-"select patient_matrix.*, labfreq.labfreq from patient_matrix left join labfreq on patient_matrix.patient_id=labfreq.patient_id"
#patient_matrix<-sqldf(patient_matrixjoin1, stringsAsFactors=FALSE)
patient_matrix<-merge(patient_matrix,labfreq,by="patient_id", all.x=TRUE)
nacols(patient_matrix)
patient_matrix$labfreq[which(is.na(patient_matrix$labfreq))] <- 0# replace patient_matrix$labfreq NA values with 0
col1_idx<-grep("labfreq",names(patient_matrix))
patient_matrix<-patient_matrix[,c(col1_idx,(1:ncol(patient_matrix))[-col1_idx])]
col2_idx<-grep("patient_id",names(patient_matrix))
patient_matrix<-patient_matrix[,c(col2_idx,(1:ncol(patient_matrix))[-col2_idx])]
save(patient_matrix, file="/project/msca/capstone3/patient_matrix2revise.RData")

#Step 7:
#Clean
#1: Clean Data
patient_matrix<-data.frame(patient_matrix)
patient_matrix$race[patient_matrix$race == 'B'] <- 'Black/African-American'
patient_matrix$race[patient_matrix$race == 'W'] <- 'White'
patient_matrix$race[patient_matrix$race == 'U'] <- 'Unknown'
patient_matrix$race[patient_matrix$race == 'Patient Declined'] <- 'Unknown'
patient_matrix$race[patient_matrix$race == ''] <- 'Unknown'
patient_matrix$race[patient_matrix$race == 'A'] <- 'Asian/Mideast Indian'
patient_matrix$race[patient_matrix$race == 'N/A'] <- 'Unknown'
patient_matrix$race[patient_matrix$race == 'N'] <- 'Unknown'
patient_matrix$race[patient_matrix$race == 'NA'] <- 'Unknown'

#clean marital status
patient_matrix$marital_status[patient_matrix$marital_status == ''] <- 'Unknown'
patient_matrix$marital_status[patient_matrix$marital_status == 'N/A'] <- 'Unknown'

#clean ethnicity
patient_matrix$ethnicity[patient_matrix$ethnicity == ''] <- 'Unknown'
patient_matrix$ethnicity[patient_matrix$ethnicity == 'N/A'] <- 'Unknown'
patient_matrix$ethnicity[patient_matrix$ethnicity == 'Patient Declined'] <- 'Unknown'

levels(patient_matrix$marital_status)
table(patient_matrix$marital_status)

# clean mode_discharge_dispo (convert to factor)
patient_matrix$mode_discharge_dispo <- as.factor(patient_matrix$mode_discharge_dispo)

# clean labfreq 
patient_matrix$labfreq[which(is.na(patient_matrix$labfreq))] <- 0

# clean medfreq
patient_matrix$medfreq[which(is.na(patient_matrix$medfreq))] <- 0

# remove dead patients & dod_off column
patient_matrix <- patient_matrix[which(patient_matrix$dod_off==""),-which(colnames(patient_matrix)=="dod_off")]
patient_matrix <- patient_matrix[-which(patient_matrix$mode_discharge_dispo=="Expired"),]

save(patient_matrix, file="/project/msca/capstone3/patient_matrix2revise.RData")

# remove patients with only 1 encounter total
patient_matrix <- patient_matrix[-which(patient_matrix$y2_charges==0 & patient_matrix$encountfreq==1),]

save(patient_matrix, file="/project/msca/capstone3/patient_matrix_final.RData")

# kmeans cluster
load("/project/msca/capstone3/patient_matrix_final.RData")

# km.charges_log <- kmeans(log(patient_matrix$y2_charges), 2)
# km.charges_log$size #[1] 17632 16371
# km.charges_log$centers


set.seed(10)
km.charges <- kmeans(patient_matrix$y2_charges,2)
km.charges$size[1] #[1]   597 33789
km.charges$centers[1]
head(km.charges$cluster)
plot(patient_matrix$y2_charges,km.charges$cluster)
min(patient_matrix$y2_charges[which(km.charges$cluster==1)])# The lowest "high-cost" patient cost $164923.50z.
max(patient_matrix$y2_charges[which(km.charges$cluster==2)])# The highest "low-cost" patient cost $163638.
#Our cutoff value between high and low-cost patients is $157,245.40.
cutoff <- mean(min(patient_matrix$y2_charges[which(km.charges$cluster==1)]),max(patient_matrix$y2_charges[which(km.charges$cluster==2)]))
abline(v=cutoff,col="red")

cutoff

#Step 1: label the patients for classification 0 or 1 

patient_matrix$label <- 0
patient_matrix$label[which(patient_matrix$y2_charges>cutoff)]<-1
patient_matrix$label <- as.factor(patient_matrix$label)

#Step 2: create train, test, validate sets
set.seed(10)
train <- sample(1:nrow(patient_matrix),floor(0.6*nrow(patient_matrix)))
training.set <- patient_matrix[train,]
totalvalidation.set<-patient_matrix[-train,]
set.seed(10)
invalidation<-sample(1:nrow(totalvalidation.set),floor(0.5*nrow(totalvalidation.set)))
testing.set<-totalvalidation.set[invalidation,]
validation.set<-totalvalidation.set[-invalidation,]
save(training.set, testing.set, validation.set,file="/project/msca/capstone3/datasplits2.RData")

